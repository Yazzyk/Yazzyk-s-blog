<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Yazzyk&#39;s Blog</title>
    <link>https://shroot.dev/tags/golang/</link>
    <description>Recent content in Golang on Yazzyk&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 18 Oct 2020 16:30:50 +0800</lastBuildDate><atom:link href="https://shroot.dev/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang枚举实现，并制成字典反给前端使用</title>
      <link>https://shroot.dev/posts/go_enum/</link>
      <pubDate>Sun, 18 Oct 2020 16:30:50 +0800</pubDate>
      
      <guid>https://shroot.dev/posts/go_enum/</guid>
      <description>方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 package t import ( &amp;#34;reflect&amp;#34; &amp;#34;strconv&amp;#34; ) type EnumType int8 func GetEnumMap(obj interface{}) (statusMap map[EnumType]string) { ta := reflect.TypeOf(obj) statusMap = make(map[EnumType]string) for i := 0; i &amp;lt; ta.NumField(); i++ { fl := ta.Field(i) statusNum, _ := strconv.Atoi(fl.Tag.Get(&amp;#34;enum&amp;#34;)) statusMap[EnumType(statusNum)] = fl.Tag.Get(&amp;#34;desc&amp;#34;) } return } func GetEnumByDesc(obj interface{}, desc string) EnumType { ta := reflect.TypeOf(obj) statusMap := make(map[string]EnumType) for i</description>
    </item>
    
  </channel>
</rss>
